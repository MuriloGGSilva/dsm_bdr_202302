CREATE TABLE tbl_departamentos(
    id_departamento INTEGER PRIMARY KEY,
    nome_departamento VARCHAR(50)
);

CREATE TABLE tbl_funcionarios(
    id_funcionario INTEGER PRIMARY KEY,
    primeiro_nome TEXT,
    sobrenome TEXT,
    salario REAL
);

CREATE TABLE tbl_funcionario_departamento(
    id_funcionario INTEGER,
    id_departamento INTEGER
);

CREATE TABLE tbl_tarefas(
    id_tarefa INTEGER PRIMARY KEY,
    nome_tarefa TEXT,
    prazo DATE,
    id_funcionario INTEGER REFERENCES tbl_departamentos(id_departamento)
);

INSERT INTO tbl_departamentos VALUES
(1,'TI'),
(2,'RH'),
(3,'Finanças'),
(4,'Marketing'),
(5,'Vendas');

INSERT INTO tbl_funcionarios VALUES
(1,'Clara','Ribeiro',65000),
(2,'Rodrigo','Costa',80000),
(3,'Juliana','Almeida',90000),
(4,'Marcio','Cunha',72000),
(5,'Helena','Lima',68000);

INSERT INTO tbl_funcionario_departamento VALUES
(1,1),
(2,1),
(3,2),
(4,2),
(5,5);

INSERT INTO tbl_tarefas VALUES
(1,'Tarefa 1','2023-12-01',1),
(2,'Tarefa 2','2023-12-15',2),
(3,'Tarefa 3','2023-12-10',3),
(4,'Tarefa 4','2023-12-05',4),
(5,'Tarefa 5','2023-11-30',5);

--Pergunta 1--
SELECT * FROM tbl_funcionarios;
SELECT * FROM tbl_departamentos;
SELECT * FROM tbl_funcionario_departamento;
SELECT * FROM tbl_tarefas;

--Pergunta 2--
CREATE VIEW v_funcionarios_salario_alto AS
SELECT UPPER(primeiro_nome),salario FROM tbl_funcionarios WHERE salario >= 70000;

SELECT * FROM v_funcionarios_salario_alto;

--Pergunta 3--

CREATE OR REPLACE PROCEDURE sp_atribuir_tarefa_funcionario(
    IN a_id_tarefa INT,
    IN b_id_funcionario INT
)
LANGUAGE plpgsql
AS $$
BEGIN
    -- Verifica se o funcionário e a tarefa existem
    IF EXISTS (SELECT 1 FROM tbl_funcionarios WHERE id_funcionario = b_id_funcionario) AND
       EXISTS (SELECT 1 FROM tbl_tarefas WHERE id_tarefa = a_id_tarefa) THEN
        -- Atualiza o ID do funcionário para a tarefa
        UPDATE tbl_tarefas
        SET id_funcionario = b_id_funcionario
        WHERE id_tarefa = a_id_tarefa;

        RAISE NOTICE 'Tarefa atribuída com sucesso!';
    ELSE
        RAISE EXCEPTION 'ID de funcionário ou tarefa inválido.';
    END IF;
END;
$$;

CALL sp_atribuir_tarefa_funcionario(2,3);

SELECT * FROM tbl_tarefas;

--Pergunta 4--

CREATE OR REPLACE FUNCTION fc_obter_funcionarios_departamento(
    a_nome_departamento VARCHAR
)
RETURNS SETOF TEXT
language plpgsql AS
$$
BEGIN
    RETURN QUERY
    SELECT z.primeiro_nome
    FROM tbl_funcionarios z
    JOIN tbl_funcionario_departamento x ON z.id_funcionario = x.id_funcionario
    JOIN tbl_departamentos d ON x.id_departamento = d.id_departamento
    WHERE d.nome_departamento = a_nome_departamento;
END
$$ ;

SELECT * FROM fc_obter_funcionarios_departamento('TI');

--Pergunta 5--

CREATE TABLE tbl_log_salario(
    id_log SERIAL  PRIMARY KEY,
    salario_anterior REAL,
    novo_salario REAL,
    id_funcionario INTEGER REFERENCES tbl_funcionarios(id_funcionario)
);

CREATE OR REPLACE FUNCTION tr_log_mudancas_salario()
RETURNS TRIGGER 
language plpgsql AS 
$$
BEGIN
    IF NEW.salario <> OLD.salario THEN
        INSERT INTO tbl_log_salario (id_funcionario, salario_anterior, novo_salario)
        VALUES (NEW.id_funcionario, OLD.salario, NEW.salario);
    END IF;
    RETURN NEW;
END;
$$

CREATE TRIGGER tr_log_mudancas_salario
BEFORE UPDATE ON tbl_funcionarios
FOR EACH ROW
EXECUTE FUNCTION tr_log_mudancas_salario();

UPDATE tbl_funcionarios SET salario=10000 WHERE id_funcionario=1;

SELECT * FROM tbl_log_salario;
